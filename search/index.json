[{"content":"extension extensionは既存のクラスに定義を追加するために用いられます。例えば以下の例だと、UIColorにrandomというプロパティ(定数とは何が違うのか知らないけど)が新たに定義されたということになります。\n1 2 3 4 5 6 7 8 9 10 11  import UIKit extension UIColor { static var random: UIColor { let r = CGFloat.random(in: 0...255) / 255.0 let g = CGFloat.random(in: 0...255) / 255.0 let b = CGFloat.random(in: 0...255) / 255.0 return UIColor(red: r, green: g, blue: b, alpha: 1.0) } }   わからないこと\n extendと何が違うのか？ extendとの使い分けがよくわからない  ClosedRange ClosedRangeは上限と下限の間の間隔を自動で補完してくれる機能です。例えば、let throughFive = 0...5と書いたときに、throughFiveでは内部的に0,1,2,3,4,5と展開されるため、以下のように0から5の間の整数がthroughFiveに含まれている。\n1 2 3 4 5 6  throughFive.contains(3) // true throughFive.contains(10) // false throughFive.contains(5) // true   小数のときには自動的にdoubleに変換されて一番小さな桁で間隔がとられる。\n","date":"2022-02-25T20:30:37+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/extension/","title":"Swiftの記法とかをまとめる"},{"content":"実行環境  MacBook Air (M1, 2020) 16GB macOS 12.2.1  発生した問題 最近、コーディングをしていたら突然codeコマンドが使えなくなりました。具体的には以下の状態になってしまったのです。\n1 2  🔋100% ❯ code zsh: command not found: code   zshがコマンドを認識していない、ということはzshのプロファイルがおかしいのかと思い.zshrcを覗いたのですが問題はなさそうで、、、\nというわけで再度インストールを試すとVisual Studio Codeが以下のエラーを吐きます。\n1  EACCES: permission denied, unlink \u0026#39;/usr/local/bin/code\u0026#39;   解決策 一度codeコマンドをアンインストールをします。command+Shift+Pで「Shell Command」と入力して「シェルコマンド：PATH内に\u0026rsquo;code\u0026rsquo;コマンドをアンインストール」を選択、「管理者特権でシェル コマンドをインストールできるように、Code が \u0026lsquo;osascript\u0026rsquo; のプロンプトを出します。」をOKし、認証を行います。そして、再度インストールします。\nなぎさの一言  codeコマンドが使えない時にはcodeコマンドをアンインストールしてから再度インストールします！    ","date":"2022-02-24T18:42:25+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/eacces/","title":"Macでcodeコマンドが使えない時のソリューション"},{"content":"Github Actionsを使いたいとき、yamlファイルにアクションを定義します。ここでは、アップロード先のリポジトリをblog-sourceにしてGithub　Actionsでビルド、blogリポジトリにビルド結果をpushすることでソースをblog-source、ブログの静的ファイルをblogに置くこととします。このとき、blog-sourceにアップロードするblog-source/.github/workflows/gh-pages.ymlは以下のように書きます 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  name:Deploy Hugoon:push:branches:- mainjobs:deploy:runs-on:ubuntu-20.04concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v2with:submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#34;0.92.2\u0026#34;extended:true- name:Buildrun:hugo --minify- name:Push to blog repouses:cpina/github-action-push-to-another-repository@mainenv:API_TOKEN_GITHUB:${{ secrets.HUGO_DEPLOY_TOKEN }}with:source-directory:\u0026#34;public\u0026#34;destination-github-username:\u0026#34;kurusunagisa\u0026#34;destination-repository-name:\u0026#34;blog\u0026#34;user-email:kurusunagisa963@gmail.comtarget-branch:main  ここで行なっている処理とその効果は以下の通りです。\n Github ActionsでHugoをビルドするとpublicフォルダに静的ファイル群が生成される 静的ファイル群をblogリポジトリのルートにpushする Github Pagesをルートディレクトリに設定してあれば、静的ファイル群が自動的にGithub Pagesに乗っかる  ","date":"2022-02-23T18:34:50+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/github-actions/","title":"Github Actions"},{"content":"エラー内容 GithubでHugoをデプロイしようとすると以下のエラーが起こりました。\n1 2 3 4  (一部抜粋) ERROR 2022/02/22 13:07:50 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: page/search.html:11:19: executing \u0026#34;left-sidebar\u0026#34; at \u0026lt;partial \u0026#34;sidebar/left.html\u0026#34; .\u0026gt;: error calling partial: \u0026#34;/home/runner/work/blog/blog/themes/hugo-theme-stack/layouts/partials/sidebar/left.html:43:58\u0026#34;: execute of template failed: template: partials/sidebar/left.html:43:58: executing \u0026#34;partials/sidebar/left.html\u0026#34; at \u0026lt;.Params.newTab\u0026gt;: can\u0026#39;t evaluate field Params in type *navigation.MenuEntry Total in 164 ms Error: Process completed with exit code 255.   解決策 HugoのExtendedをビルド時にダウンロードするようにします。以下のようにして、Extendedを有効にしてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  name:github pageson:push:branches:- main jobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.92.2\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:kurusunagisa/blogpublish_branch:main  なぎさの一言  エラーはしっかりとググって解決することが大事です！    ","date":"2022-02-22T22:16:16+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/github-deploy-error/","title":"Github Deploy Error"},{"content":"この記事でわかること  RPCとは何か gRPCの成り立ち gRPCとGolangの繋がり  RPCとは？ 皆さんはRPCを知っていますか？ RPCは情報のやり取りの手法で、「クライアントーサーバ」型の通信プロトコルです。クライアントがサーバに対してパラメータでデータを送信し、サーバはパラメータに応じた処理を実行してその結果をクライアントに返します。簡単に言えば、APIサーバにリクエストを投げると結果が返ってくる、そんなイメージです。私たちが普段目にするパラメータはXML形式やJSON形式が多いです。ただ、これらは人間が扱いやすくすることを最優先した結果データの転送効率が悪くなってしまったのでした……\n効率の良いプロトコルを目指して 転送効率のいい形式を目指した結果、ある1つの形式が生まれました。それがgRPCです。\ngRPCは天下のGoogleが開発した技術がベースとなっています。だからgが頭につくんですね。Googleのサービスはマイクロサービスアーキテクチャで構築されており、サービス間のデータのやり取りが非常に多いというわけです。そのため、Googleのつよつよエンジニアが~自分達で勝手に~プロトコルを定義して使っていました。現代はマイクロサービスアーキテクチャ全盛期。gRPCはマイクロサービスアーキテクチャに特化して作られており、非常に効率が良く扱いやすいのです。そのため、今日現在ではgRPCが多くの場所で使われています。\nGolangとgRPC GolangはgRPCと同じくGoogle製です。そのため、相性がいいのです。(この世はGoogleに支配されている)\nGolangではgrpcというモジュールをインポートするだけでgRPCが使えます。\nなぎさの一言  gRPCはハイスペックだけど普及率など問題点も多い！そのため時と場合に応じた技術選定が必要ですね！    参考文献 https://knowledge.sakura.ad.jp/24059/\n","date":"2022-02-22T18:35:48+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/grpc/","title":"gRPCとは？"},{"content":" こんにちは！！！来栖なぎさです！！     なぎさの成長を見てくださいね～！     それでは、今後ともよろしく！    ","date":"2022-02-08T15:35:48+09:00","permalink":"https://kurusunagisa.github.io/blog/2022/02/hajimemashite/","title":"初めまして！"}]